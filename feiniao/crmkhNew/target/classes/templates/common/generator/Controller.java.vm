package ${package}.controller;

import java.util.List;
import java.util.Map;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.UUID;

import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import ${package}.domain.${className}DO;
import ${package}.service.${className}Service;
import com.yunda.base.common.controller.BaseController;
import com.yunda.base.common.utils.PageUtils;
import com.yunda.base.common.utils.Query;
import com.yunda.base.common.utils.R;
import com.github.crab2died.ExcelUtils;
import com.yunda.base.system.config.SysConfig;
import com.yunda.base.system.domain.UserDO;
import com.yunda.base.system.vo.RspBean;
import com.yunda.ydmbspringbootstarter.common.annotation.MethodLock;
import com.yunda.ydmbspringbootstarter.common.utils.FileUtil;

/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
 
@Controller
@RequestMapping("/${pathName}/${classname}")
public class ${className}Controller extends BaseController{
	Logger log = Logger.getLogger(getClass());
	@Autowired
	private ${className}Service ${classname}Service;
	
	@GetMapping()
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	String ${className}(){
	    return "${pagePathName}/${classname}/${classname}";
	}
	
	@ResponseBody
	@GetMapping("/list")
	@MethodLock(key = "request")
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	public RspBean<PageUtils> list(HttpServletRequest request, HttpServletResponse response,
		@ModelAttribute @Validated Bo_${className} boInterface, BindingResult bindingResult){
		if (bindingResult.hasErrors()) {
			notifyPage(bindingResult.getFieldError().getDefaultMessage());
			// 如果验参报错，返回空值给页面
			return success(new PageUtils());
		}
		UserDO loginUser = getUser(request);
		
		List<${className}DO> ${classname}List = ${classname}Service.list(boInterface,loginUser);
		int total = ${classname}Service.count(boInterface,loginUser);
		PageUtils pageUtils = new PageUtils(${classname}List, total);
		return success(pageUtils);
	}

	// 导出excel
	@RequestMapping("/exportExcel")
	@MethodLock(key = "exportExcel")
	@RequiresPermissions("${pathName}:${classname}:exportExcel")
	public void exportExcel(HttpServletRequest request, HttpServletResponse response,
			@ModelAttribute @Validated Bo_${classname} boInterface, BindingResult bindingResult) {
		if(bindingResult.hasErrors()){
				FieldError fieldError = bindingResult.getFieldError();
				notifyPage(fieldError.getField() + ":" +fieldError.getDefaultMessage());
				return;
		}
		UserDO loginUser = getUser(request);
		List<${className}DO> ${classname}List = ${classname}Service.list(boInterface,loginUser);
		String targetFile = SysConfig.TARGET + UUID.randomUUID().toString() + ".xlsx";
		File downloadFile = new File(targetFile);
		
		try {
			File file = new File(SysConfig.TEMPLATE+"XXX.xlsx");
			response.setContentType("application/vnd.ms-excel;charset=utf-8");
			response.setCharacterEncoding("utf-8");
			// set headers for the response
			String headerKey = "Content-Disposition";
			String headerValue = String.format("attachment; filename=\"%s\"", new String(downloadFile.getName().getBytes(StandardCharsets.UTF_8), "iso8859-1"));
			response.setHeader(headerKey, headerValue);
			//整理要导出的字段
			List<Export${className}DO> result = ${className}Service.filterData(${className}List);
			
			if(file.exists()  &&  SysConfig.USER_TEMPLATE.equals("true")){
				Map<String, String> data = new HashMap<>();
				// 基于模板导出Excel  https://gitee.com/Crab2Died/Excel4J
				ExcelUtils.getInstance().exportObjects2Excel(file.getPath(), 0, result,data,
						Export${className}DO.class, false, response.getOutputStream());
			} else {
				//模板文件不存在  默认输出
				ExcelUtils.getInstance().exportObjects2Excel(result,Export${className}DO.class,response.getOutputStream());
			}
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
	}

	// 下载excel模版
	@RequestMapping("/downTemplate")
	@MethodLock(key = "downTemplate")
	// 下载模版和导入共用同一个权限
	@RequiresPermissions("${pathName}:${classname}:importExcel")
	public void downTemplate(HttpServletResponse response) {
		String targetFile = SysConfig.tempDownload + UUID.randomUUID().toString() + ".xlsx";
		try {
			ExcelUtils.getInstance().exportObjects2Excel(new ArrayList<${className}DO>(), ${className}DO.class, targetFile);

			// 写入response
			File downloadFile = new File(targetFile);
			FileUtil.downloadByResponse(response, downloadFile);
			downloadFile.delete();
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			//e.printStackTrace();
		}
	}

	// 导入excel
	@ResponseBody
	@MethodLock(key = "importExcel")
	@RequestMapping(value = "/importExcel", consumes = "multipart/*", headers = "content-type=mutipart/form-data", method = RequestMethod.POST)
	@RequiresPermissions("${pathName}:${classname}:importExcel")
	public R importExcel(MultipartFile file) {
		List<${className}DO> list = null;

		String fileKey = UUID.randomUUID().toString();
		// 获取后缀
		String fileName = file.getOriginalFilename();
		if (fileName.lastIndexOf(".") != -1) {
			String suffix = fileName.substring(fileName.lastIndexOf("."));
			String uploadFile = SysConfig.uploadPath + fileKey + suffix;

			File _f = new File(uploadFile);
			if (!_f.getParentFile().exists()) {
				_f.getParentFile().mkdirs();
			}

			BufferedOutputStream out = null;
			try {
				out = new BufferedOutputStream(new FileOutputStream(_f));
				out.write(file.getBytes());
				out.flush();

				list = ExcelUtils.getInstance().readExcel2Objects(uploadFile, ${className}DO.class, 0, 0);
			} catch (Exception e) {
				log.error(e.getMessage(), e);
				//e.printStackTrace();
			} finally {
				try {
					out.close();
				} catch (Exception e) {
				}
			}
		}

		if (list != null) {
			for (${className}DO _do : list) {
				${classname}Service.save(_do);
			}
		}

		return R.ok();
	}		
	
	@GetMapping("/add")
	@RequiresPermissions("${pathName}:${classname}:add")
	String add(){
	    return "${pagePathName}/${classname}/add";
	}

	@GetMapping("/edit/{${pk.attrname}}")
	@RequiresPermissions("${pathName}:${classname}:edit")
	String edit(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname},Model model){
		${className}DO ${classname} = ${classname}Service.get(${pk.attrname});
		model.addAttribute("${classname}", ${classname});
	    return "${pagePathName}/${classname}/edit";
	}
	
	/**
	 * 保存
	 */
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("${pathName}:${classname}:add")
	public R save( ${className}DO ${classname}){
		if(${classname}Service.save(${classname})>0){
			return R.ok();
		}
		return R.error();
	}
	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("${pathName}:${classname}:edit")
	public R update( ${className}DO ${classname}){
		${classname}Service.update(${classname});
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classname}:remove")
	public R remove( ${pk.attrType} ${pk.attrname}){
		if(${classname}Service.remove(${pk.attrname})>0){
		return R.ok();
		}
		return R.error();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classname}:batchRemove")
	public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.batchRemove(${pk.attrname}s);
		return R.ok();
	}
	
}
