<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 日志目录 -->
	<property name="logback.logdir" value="/u02/weblogs" />

	<property name="logback.name" value="kywechat" />
	<contextName>kywechat</contextName>
	
	<!--输出到控制台 ConsoleAppender -->
	<appender name="consoleLog2" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d [%level] %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>	

	<!-- 单独记录info日志 -->
	<appender name="fileInfoLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤掉非INFO级别 -->
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/info.${logback.name}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/info.${logback.name}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近60天的日志 -->
			<maxHistory>60</maxHistory>
			<!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%level] %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 单独记录warn日志 -->
	<appender name="fileWarnLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤掉非INFO级别 -->
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/warn.${logback.name}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/warn.${logback.name}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近60天的日志 -->
			<maxHistory>60</maxHistory>
			<!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%level] %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 单独记录error日志 -->
	<appender name="fileErrorLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/error.${logback.name}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/error.${logback.name}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近60天的日志 -->
			<maxHistory>60</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%level] %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 基于dubug处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 -->
	<root level="info">
		<appender-ref ref="consoleLog2" />
		<appender-ref ref="fileInfoLog" />
		<appender-ref ref="fileWarnLog" />
		<appender-ref ref="fileErrorLog" />
	</root>
</configuration>
